*****************************************;
** SAS Scoring Code for PROC Logistic;
*****************************************;

length I_Next_stat $ 3;
label I_Next_stat = 'Into: Next_stat' ;
length U_Next_stat $ 3;
label U_Next_stat = 'Unnormalized Into: Next_stat' ;
label P_Next_statDEL = 'Predicted: Next_stat=DEL' ;
label P_Next_statPPY = 'Predicted: Next_stat=PPY' ;
label P_Next_statSDQ = 'Predicted: Next_stat=SDQ' ;
label P_Next_statCUR = 'Predicted: Next_stat=CUR' ;

drop _LMR_BAD;
_LMR_BAD=0;

*** Check interval variables for missing values;
if nmiss(CLTV,Dti,Cscore_b,Orig_amt,Curr_rte,Act_upb,Loan_age,HS,PPI,Permits,
        GDP,QGT_GDP,QRT_GDP,AG_GDP,QDT_UMP,QGT_UMP,AG_UMP) then do;
   _LMR_BAD=1;
   goto _SKIP_000;
end;

*** Generate design variables for Purpose;
drop _1_0 _1_1 _1_2 ;
_1_0= 0;
_1_1= 0;
_1_2= 0;
length _st1 $ 1; drop _st1;
_st1 = left(trim(put (Purpose, $1.)));
if _st1 = 'C'  then do;
   _1_0 = 1;
end;
else if _st1 = 'P'  then do;
   _1_1 = 1;
end;
else if _st1 = 'R'  then do;
   _1_2 = 1;
end;
else do;
   _1_0 = .;
   _1_1 = .;
   _1_2 = .;
   _LMR_BAD=1;
   goto _SKIP_000;
end;

*** Compute Linear Predictors;
drop _LP0 _LP1 _LP2;
_LP0 = 0;
_LP1 = 0;
_LP2 = 0;

*** Effect: CLTV;
_LP0 = _LP0 + (0.01274664724915) * CLTV;
_LP1 = _LP1 + (-0.00229560430426) * CLTV;
_LP2 = _LP2 + (0.03474465351881) * CLTV;
*** Effect: Dti;
_LP0 = _LP0 + (0.01368644086071) * Dti;
_LP1 = _LP1 + (-0.00190035945674) * Dti;
_LP2 = _LP2 + (0.06592197477603) * Dti;
*** Effect: Cscore_b;
_LP0 = _LP0 + (-0.01073351725956) * Cscore_b;
_LP1 = _LP1 + (0.00175337928508) * Cscore_b;
_LP2 = _LP2 + (0.04485338849171) * Cscore_b;
*** Effect: Orig_amt;
_LP0 = _LP0 + (-0.00001522647835) * Orig_amt;
_LP1 = _LP1 + (4.5762638973634E-6) * Orig_amt;
_LP2 = _LP2 + (-0.0000989265408) * Orig_amt;
*** Effect: Purpose;
_LP0 = _LP0 + (0.04313472621589) * _1_0;
_LP1 = _LP1 + (-0.00596618422379) * _1_0;
_LP2 = _LP2 + (-1.86547846271083) * _1_0;
_LP0 = _LP0 + (-0.24252228145306) * _1_1;
_LP1 = _LP1 + (-0.01257289929462) * _1_1;
_LP2 = _LP2 + (-3.0756619928329) * _1_1;
*** Effect: Curr_rte;
_LP0 = _LP0 + (0.2114692242949) * Curr_rte;
_LP1 = _LP1 + (0.41072247077963) * Curr_rte;
_LP2 = _LP2 + (-0.05757515555006) * Curr_rte;
*** Effect: Act_upb;
_LP0 = _LP0 + (0.0000158906296) * Act_upb;
_LP1 = _LP1 + (-2.9562761568871E-6) * Act_upb;
_LP2 = _LP2 + (0.00010402468245) * Act_upb;
*** Effect: Loan_age;
_LP0 = _LP0 + (0.01267607762455) * Loan_age;
_LP1 = _LP1 + (0.00277126155706) * Loan_age;
_LP2 = _LP2 + (0.07503514768987) * Loan_age;
*** Effect: HS;
_LP0 = _LP0 + (-0.00048197390514) * HS;
_LP1 = _LP1 + (-0.00262545147521) * HS;
_LP2 = _LP2 + (-0.00675014867448) * HS;
*** Effect: PPI;
_LP0 = _LP0 + (-0.00072878419822) * PPI;
_LP1 = _LP1 + (-0.01068110274425) * PPI;
_LP2 = _LP2 + (-0.16763456324921) * PPI;
*** Effect: Permits;
_LP0 = _LP0 + (0.00003929771354) * Permits;
_LP1 = _LP1 + (0.00109744759475) * Permits;
_LP2 = _LP2 + (-0.00996892309218) * Permits;
*** Effect: GDP;
_LP0 = _LP0 + (0.00005774683413) * GDP;
_LP1 = _LP1 + (0.000100383065) * GDP;
_LP2 = _LP2 + (0.00224165768613) * GDP;
*** Effect: QGT_GDP;
_LP0 = _LP0 + (111.452903376822) * QGT_GDP;
_LP1 = _LP1 + (107.36758611682) * QGT_GDP;
_LP2 = _LP2 + (-22725.5947937158) * QGT_GDP;
*** Effect: QRT_GDP;
_LP0 = _LP0 + (-106.148921965829) * QRT_GDP;
_LP1 = _LP1 + (-85.1006370658418) * QRT_GDP;
_LP2 = _LP2 + (22511.3882236827) * QRT_GDP;
*** Effect: AG_GDP;
_LP0 = _LP0 + (-0.0297136025964) * AG_GDP;
_LP1 = _LP1 + (-0.17998945355933) * AG_GDP;
_LP2 = _LP2 + (0.58991100612298) * AG_GDP;
*** Effect: QDT_UMP;
_LP0 = _LP0 + (-0.2242875615279) * QDT_UMP;
_LP1 = _LP1 + (0.59655640398517) * QDT_UMP;
_LP2 = _LP2 + (10.3171741903367) * QDT_UMP;
*** Effect: QGT_UMP;
_LP0 = _LP0 + (2.3754741994642) * QGT_UMP;
_LP1 = _LP1 + (-6.43278937911011) * QGT_UMP;
_LP2 = _LP2 + (-41.2291283726081) * QGT_UMP;
*** Effect: AG_UMP;
_LP0 = _LP0 + (0.00105462726902) * AG_UMP;
_LP1 = _LP1 + (-0.02003106318405) * AG_UMP;
_LP2 = _LP2 + (-0.15803141350418) * AG_UMP;

*** Predicted values;
drop _LPMAX _MAXP _IY _P0 _P1 _P2 _P3;
_LPMAX= 0;
_LP0 =     106.248458750935 + _LP0;
if _LPMAX < _LP0 then _LPMAX = _LP0;
_LP1 =     80.4521116880049 + _LP1;
if _LPMAX < _LP1 then _LPMAX = _LP1;
_LP2 =    -22550.6104534381 + _LP2;
if _LPMAX < _LP2 then _LPMAX = _LP2;
_LP0 = exp(_LP0 - _LPMAX);
_LP1 = exp(_LP1 - _LPMAX);
_LP2 = exp(_LP2 - _LPMAX);
_LPMAX = exp(-_LPMAX);
_P3 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2);
_P0 = _LP0 * _P3;
_P1 = _LP1 * _P3;
_P2 = _LP2 * _P3;
_P3 = _LPMAX * _P3;
P_Next_statDEL = _P0;
_MAXP = _P0;
_IY = 1;
P_Next_statPPY = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
P_Next_statSDQ = _P2;
if (_P2 >  _MAXP + 1E-8) then do;
   _MAXP = _P2;
   _IY = 3;
end;
P_Next_statCUR = _P3;
if (_P3 >  _MAXP + 1E-8) then do;
   _MAXP = _P3;
   _IY = 4;
end;
select( _IY );
   when (1) do;
      I_Next_stat = 'DEL' ;
      U_Next_stat = 'DEL' ;
   end;
   when (2) do;
      I_Next_stat = 'PPY' ;
      U_Next_stat = 'PPY' ;
   end;
   when (3) do;
      I_Next_stat = 'SDQ' ;
      U_Next_stat = 'SDQ' ;
   end;
   when (4) do;
      I_Next_stat = 'CUR' ;
      U_Next_stat = 'CUR' ;
   end;
   otherwise do;
      I_Next_stat = '';
      U_Next_stat = '';
   end;
end;
_SKIP_000:
if _LMR_BAD = 1 then do;
I_Next_stat = '';
U_Next_stat = '';
P_Next_statDEL = .;
P_Next_statPPY = .;
P_Next_statSDQ = .;
P_Next_statCUR = .;
end;
