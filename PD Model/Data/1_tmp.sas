*****************************************;
** SAS Scoring Code for PROC Logistic;
*****************************************;

length I_Next_stat $ 3;
label I_Next_stat = 'Into: Next_stat' ;
length U_Next_stat $ 3;
label U_Next_stat = 'Unnormalized Into: Next_stat' ;
label P_Next_statDEL = 'Predicted: Next_stat=DEL' ;
label P_Next_statPPY = 'Predicted: Next_stat=PPY' ;
label P_Next_statSDQ = 'Predicted: Next_stat=SDQ' ;
label P_Next_statCUR = 'Predicted: Next_stat=CUR' ;

drop _LMR_BAD;
_LMR_BAD=0;

*** Check interval variables for missing values;
if nmiss(CLTV,Dti,Cscore_b,Orig_amt,Curr_rte,Loan_age,HS,PPI,GDP,QGT_GDP,
        QRT_GDP,AG_GDP,QDT_UMP,QGT_UMP) then do;
   _LMR_BAD=1;
   goto _SKIP_000;
end;

*** Generate design variables for Purpose;
drop _1_0 _1_1 _1_2 ;
_1_0= 0;
_1_1= 0;
_1_2= 0;
length _st1 $ 1; drop _st1;
_st1 = left(trim(put (Purpose, $1.)));
if _st1 = 'C'  then do;
   _1_0 = 1;
end;
else if _st1 = 'P'  then do;
   _1_1 = 1;
end;
else if _st1 = 'R'  then do;
   _1_2 = 1;
end;
else do;
   _1_0 = .;
   _1_1 = .;
   _1_2 = .;
   _LMR_BAD=1;
   goto _SKIP_000;
end;

*** Compute Linear Predictors;
drop _LP0 _LP1 _LP2;
_LP0 = 0;
_LP1 = 0;
_LP2 = 0;

*** Effect: CLTV;
_LP0 = _LP0 + (0.01446567221108) * CLTV;
_LP1 = _LP1 + (-0.00293235409981) * CLTV;
_LP2 = _LP2 + (0.05626782809263) * CLTV;
*** Effect: Dti;
_LP0 = _LP0 + (0.01387518306958) * Dti;
_LP1 = _LP1 + (-0.00218238690399) * Dti;
_LP2 = _LP2 + (0.06533336060485) * Dti;
*** Effect: Cscore_b;
_LP0 = _LP0 + (-0.0114490300455) * Cscore_b;
_LP1 = _LP1 + (0.00212153121368) * Cscore_b;
_LP2 = _LP2 + (0.04246435218595) * Cscore_b;
*** Effect: Orig_amt;
_LP0 = _LP0 + (-5.0824044438615E-8) * Orig_amt;
_LP1 = _LP1 + (1.795182356344E-6) * Orig_amt;
_LP2 = _LP2 + (-5.3492382666078E-6) * Orig_amt;
*** Effect: Purpose;
_LP0 = _LP0 + (0.04905451191115) * _1_0;
_LP1 = _LP1 + (-0.00392178602358) * _1_0;
_LP2 = _LP2 + (-1.84364189570395) * _1_0;
_LP0 = _LP0 + (-0.24573873619331) * _1_1;
_LP1 = _LP1 + (0.00197849764084) * _1_1;
_LP2 = _LP2 + (-3.01420948136962) * _1_1;
*** Effect: Curr_rte;
_LP0 = _LP0 + (0.25362064060483) * Curr_rte;
_LP1 = _LP1 + (0.37602372062068) * Curr_rte;
_LP2 = _LP2 + (-0.02299865674172) * Curr_rte;
*** Effect: Loan_age;
_LP0 = _LP0 + (0.00663058944284) * Loan_age;
_LP1 = _LP1 + (0.00467274470801) * Loan_age;
_LP2 = _LP2 + (0.04658707048151) * Loan_age;
*** Effect: HS;
_LP0 = _LP0 + (-0.00042873743847) * HS;
_LP1 = _LP1 + (-0.00137816078824) * HS;
_LP2 = _LP2 + (-0.01232699655549) * HS;
*** Effect: PPI;
_LP0 = _LP0 + (-0.00075981642366) * PPI;
_LP1 = _LP1 + (-0.00521155626273) * PPI;
_LP2 = _LP2 + (-0.157783014673) * PPI;
*** Effect: GDP;
_LP0 = _LP0 + (0.00006660213242) * GDP;
_LP1 = _LP1 + (0.00012356909366) * GDP;
_LP2 = _LP2 + (0.00176365492544) * GDP;
*** Effect: QGT_GDP;
_LP0 = _LP0 + (106.245590038947) * QGT_GDP;
_LP1 = _LP1 + (360.738868915596) * QGT_GDP;
_LP2 = _LP2 + (-17709.7513578752) * QGT_GDP;
*** Effect: QRT_GDP;
_LP0 = _LP0 + (-100.50195865382) * QRT_GDP;
_LP1 = _LP1 + (-347.802521014738) * QRT_GDP;
_LP2 = _LP2 + (17484.4003340593) * QRT_GDP;
*** Effect: AG_GDP;
_LP0 = _LP0 + (-3.8936032528948) * AG_GDP;
_LP1 = _LP1 + (-5.35459060780105) * AG_GDP;
_LP2 = _LP2 + (111.033427773942) * AG_GDP;
*** Effect: QDT_UMP;
_LP0 = _LP0 + (-0.16801326126689) * QDT_UMP;
_LP1 = _LP1 + (-0.01302889735487) * QDT_UMP;
_LP2 = _LP2 + (4.89045936553938) * QDT_UMP;
*** Effect: QGT_UMP;
_LP0 = _LP0 + (1.99650439892922) * QGT_UMP;
_LP1 = _LP1 + (-5.27271210327074) * QGT_UMP;
_LP2 = _LP2 + (-36.8266249001923) * QGT_UMP;

*** Predicted values;
drop _LPMAX _MAXP _IY _P0 _P1 _P2 _P3;
_LPMAX= 0;
_LP0 =      100.74827254355 + _LP0;
if _LPMAX < _LP0 then _LPMAX = _LP0;
_LP1 =     341.200283365919 + _LP1;
if _LPMAX < _LP1 then _LPMAX = _LP1;
_LP2 =    -17520.7858565826 + _LP2;
if _LPMAX < _LP2 then _LPMAX = _LP2;
_LP0 = exp(_LP0 - _LPMAX);
_LP1 = exp(_LP1 - _LPMAX);
_LP2 = exp(_LP2 - _LPMAX);
_LPMAX = exp(-_LPMAX);
_P3 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2);
_P0 = _LP0 * _P3;
_P1 = _LP1 * _P3;
_P2 = _LP2 * _P3;
_P3 = _LPMAX * _P3;
P_Next_statDEL = _P0;
_MAXP = _P0;
_IY = 1;
P_Next_statPPY = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
P_Next_statSDQ = _P2;
if (_P2 >  _MAXP + 1E-8) then do;
   _MAXP = _P2;
   _IY = 3;
end;
P_Next_statCUR = _P3;
if (_P3 >  _MAXP + 1E-8) then do;
   _MAXP = _P3;
   _IY = 4;
end;
select( _IY );
   when (1) do;
      I_Next_stat = 'DEL' ;
      U_Next_stat = 'DEL' ;
   end;
   when (2) do;
      I_Next_stat = 'PPY' ;
      U_Next_stat = 'PPY' ;
   end;
   when (3) do;
      I_Next_stat = 'SDQ' ;
      U_Next_stat = 'SDQ' ;
   end;
   when (4) do;
      I_Next_stat = 'CUR' ;
      U_Next_stat = 'CUR' ;
   end;
   otherwise do;
      I_Next_stat = '';
      U_Next_stat = '';
   end;
end;
_SKIP_000:
if _LMR_BAD = 1 then do;
I_Next_stat = '';
U_Next_stat = '';
P_Next_statDEL = .;
P_Next_statPPY = .;
P_Next_statSDQ = .;
P_Next_statCUR = .;
end;
