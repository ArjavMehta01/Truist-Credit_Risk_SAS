*****************************************;
** SAS Scoring Code for PROC Logistic;
*****************************************;

length I_Next_stat $ 3;
label I_Next_stat = 'Into: Next_stat' ;
length U_Next_stat $ 3;
label U_Next_stat = 'Unnormalized Into: Next_stat' ;
label P_Next_statDEL = 'Predicted: Next_stat=DEL' ;
label P_Next_statPPY = 'Predicted: Next_stat=PPY' ;
label P_Next_statSDQ = 'Predicted: Next_stat=SDQ' ;
label P_Next_statCUR = 'Predicted: Next_stat=CUR' ;

drop _LMR_BAD;
_LMR_BAD=0;

*** Check interval variables for missing values;
if nmiss(CLTV,Dti,Cscore_b,Curr_rte,HS,GDP) then do;
   _LMR_BAD=1;
   goto _SKIP_000;
end;

*** Generate design variables for Purpose;
drop _1_0 _1_1 _1_2 ;
_1_0= 0;
_1_1= 0;
_1_2= 0;
length _st1 $ 1; drop _st1;
_st1 = left(trim(put (Purpose, $1.)));
if _st1 = 'C'  then do;
   _1_0 = 1;
end;
else if _st1 = 'P'  then do;
   _1_1 = 1;
end;
else if _st1 = 'R'  then do;
   _1_2 = 1;
end;
else do;
   _1_0 = .;
   _1_1 = .;
   _1_2 = .;
   _LMR_BAD=1;
   goto _SKIP_000;
end;

*** Compute Linear Predictors;
drop _LP0 _LP1 _LP2;
_LP0 = 0;
_LP1 = 0;
_LP2 = 0;

*** Effect: CLTV;
_LP0 = _LP0 + (0.01349275082392) * CLTV;
_LP1 = _LP1 + (-0.00193473561284) * CLTV;
_LP2 = _LP2 + (0.03763098031678) * CLTV;
*** Effect: Dti;
_LP0 = _LP0 + (0.01470670109135) * Dti;
_LP1 = _LP1 + (-0.00080745398784) * Dti;
_LP2 = _LP2 + (0.09570338269076) * Dti;
*** Effect: Cscore_b;
_LP0 = _LP0 + (-0.01161358216162) * Cscore_b;
_LP1 = _LP1 + (0.00275039845377) * Cscore_b;
_LP2 = _LP2 + (0.0448359382612) * Cscore_b;
*** Effect: Purpose;
_LP0 = _LP0 + (0.04096030889223) * _1_0;
_LP1 = _LP1 + (-0.04122747791555) * _1_0;
_LP2 = _LP2 + (-2.05189454942685) * _1_0;
_LP0 = _LP0 + (-0.27252628882295) * _1_1;
_LP1 = _LP1 + (-0.03289427924554) * _1_1;
_LP2 = _LP2 + (-3.24446884888667) * _1_1;
*** Effect: Curr_rte;
_LP0 = _LP0 + (0.36430671115298) * Curr_rte;
_LP1 = _LP1 + (0.38771156762421) * Curr_rte;
_LP2 = _LP2 + (0.91695477554889) * Curr_rte;
*** Effect: HS;
_LP0 = _LP0 + (-0.00069829293405) * HS;
_LP1 = _LP1 + (-0.00138443284662) * HS;
_LP2 = _LP2 + (-0.00661186533668) * HS;
*** Effect: GDP;
_LP0 = _LP0 + (0.00014054898106) * GDP;
_LP1 = _LP1 + (0.00020758542376) * GDP;
_LP2 = _LP2 + (0.00153419883069) * GDP;

*** Predicted values;
drop _LPMAX _MAXP _IY _P0 _P1 _P2 _P3;
_LPMAX= 0;
_LP0 =    -1.20018472379636 + _LP0;
if _LPMAX < _LP0 then _LPMAX = _LP0;
_LP1 =    -9.02808580283691 + _LP1;
if _LPMAX < _LP1 then _LPMAX = _LP1;
_LP2 =    -69.4098456405034 + _LP2;
if _LPMAX < _LP2 then _LPMAX = _LP2;
_LP0 = exp(_LP0 - _LPMAX);
_LP1 = exp(_LP1 - _LPMAX);
_LP2 = exp(_LP2 - _LPMAX);
_LPMAX = exp(-_LPMAX);
_P3 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2);
_P0 = _LP0 * _P3;
_P1 = _LP1 * _P3;
_P2 = _LP2 * _P3;
_P3 = _LPMAX * _P3;
P_Next_statDEL = _P0;
_MAXP = _P0;
_IY = 1;
P_Next_statPPY = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
P_Next_statSDQ = _P2;
if (_P2 >  _MAXP + 1E-8) then do;
   _MAXP = _P2;
   _IY = 3;
end;
P_Next_statCUR = _P3;
if (_P3 >  _MAXP + 1E-8) then do;
   _MAXP = _P3;
   _IY = 4;
end;
select( _IY );
   when (1) do;
      I_Next_stat = 'DEL' ;
      U_Next_stat = 'DEL' ;
   end;
   when (2) do;
      I_Next_stat = 'PPY' ;
      U_Next_stat = 'PPY' ;
   end;
   when (3) do;
      I_Next_stat = 'SDQ' ;
      U_Next_stat = 'SDQ' ;
   end;
   when (4) do;
      I_Next_stat = 'CUR' ;
      U_Next_stat = 'CUR' ;
   end;
   otherwise do;
      I_Next_stat = '';
      U_Next_stat = '';
   end;
end;
_SKIP_000:
if _LMR_BAD = 1 then do;
I_Next_stat = '';
U_Next_stat = '';
P_Next_statDEL = .;
P_Next_statPPY = .;
P_Next_statSDQ = .;
P_Next_statCUR = .;
end;
