*****************************************;
** SAS Scoring Code for PROC Logistic;
*****************************************;

length I_Next_stat $ 3;
label I_Next_stat = 'Into: Next_stat' ;
length U_Next_stat $ 3;
label U_Next_stat = 'Unnormalized Into: Next_stat' ;
label P_Next_statDEL = 'Predicted: Next_stat=DEL' ;
label P_Next_statPPY = 'Predicted: Next_stat=PPY' ;
label P_Next_statSDQ = 'Predicted: Next_stat=SDQ' ;
label P_Next_statCUR = 'Predicted: Next_stat=CUR' ;

drop _LMR_BAD;
_LMR_BAD=0;

*** Check interval variables for missing values;
if nmiss(Dti,Cscore_b,Orig_amt,Curr_rte,UPB,Loan_age,GDP,HS,HPI,PPI) then do;
   _LMR_BAD=1;
   goto _SKIP_000;
end;

*** Compute Linear Predictors;
drop _LP0 _LP1 _LP2;
_LP0 = 0;
_LP1 = 0;
_LP2 = 0;

*** Effect: Dti;
_LP0 = _LP0 + (0.02958929915025) * Dti;
_LP1 = _LP1 + (-0.00468736579236) * Dti;
_LP2 = _LP2 + (0.05493484491583) * Dti;
*** Effect: Cscore_b;
_LP0 = _LP0 + (-0.01666720756225) * Cscore_b;
_LP1 = _LP1 + (0.00190762471589) * Cscore_b;
_LP2 = _LP2 + (-0.01760566620631) * Cscore_b;
*** Effect: Orig_amt;
_LP0 = _LP0 + (-4.7669160302834E-7) * Orig_amt;
_LP1 = _LP1 + (2.0129773677433E-6) * Orig_amt;
_LP2 = _LP2 + (2.2290206506659E-6) * Orig_amt;
*** Effect: Curr_rte;
_LP0 = _LP0 + (0.52880480815439) * Curr_rte;
_LP1 = _LP1 + (0.73081185996499) * Curr_rte;
_LP2 = _LP2 + (-1.23593387783309) * Curr_rte;
*** Effect: UPB;
_LP0 = _LP0 + (2.27455934108796) * UPB;
_LP1 = _LP1 + (-1.62615280803123) * UPB;
_LP2 = _LP2 + (23.0572930850726) * UPB;
*** Effect: Loan_age;
_LP0 = _LP0 + (0.01214313832819) * Loan_age;
_LP1 = _LP1 + (0.00386963571815) * Loan_age;
_LP2 = _LP2 + (0.11794567743201) * Loan_age;
*** Effect: GDP;
_LP0 = _LP0 + (0.00012452716019) * GDP;
_LP1 = _LP1 + (0.00058913315326) * GDP;
_LP2 = _LP2 + (0.00069597529821) * GDP;
*** Effect: HS;
_LP0 = _LP0 + (-0.0006951647103) * HS;
_LP1 = _LP1 + (0.00097592429069) * HS;
_LP2 = _LP2 + (0.00275781291355) * HS;
*** Effect: HPI;
_LP0 = _LP0 + (-0.00423719542707) * HPI;
_LP1 = _LP1 + (-0.07025069355533) * HPI;
_LP2 = _LP2 + (-0.05718552510545) * HPI;
*** Effect: PPI;
_LP0 = _LP0 + (-0.00669417364996) * PPI;
_LP1 = _LP1 + (-0.0251490883949) * PPI;
_LP2 = _LP2 + (0.24695807619483) * PPI;

*** Predicted values;
drop _LPMAX _MAXP _IY _P0 _P1 _P2 _P3;
_LPMAX= 0;
_LP0 =     1.37096548035911 + _LP0;
if _LPMAX < _LP0 then _LPMAX = _LP0;
_LP1 =    -1.69899840406388 + _LP1;
if _LPMAX < _LP1 then _LPMAX = _LP1;
_LP2 =    -78.5325751282567 + _LP2;
if _LPMAX < _LP2 then _LPMAX = _LP2;
_LP0 = exp(_LP0 - _LPMAX);
_LP1 = exp(_LP1 - _LPMAX);
_LP2 = exp(_LP2 - _LPMAX);
_LPMAX = exp(-_LPMAX);
_P3 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2);
_P0 = _LP0 * _P3;
_P1 = _LP1 * _P3;
_P2 = _LP2 * _P3;
_P3 = _LPMAX * _P3;
P_Next_statDEL = _P0;
_MAXP = _P0;
_IY = 1;
P_Next_statPPY = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
P_Next_statSDQ = _P2;
if (_P2 >  _MAXP + 1E-8) then do;
   _MAXP = _P2;
   _IY = 3;
end;
P_Next_statCUR = _P3;
if (_P3 >  _MAXP + 1E-8) then do;
   _MAXP = _P3;
   _IY = 4;
end;
select( _IY );
   when (1) do;
      I_Next_stat = 'DEL' ;
      U_Next_stat = 'DEL' ;
   end;
   when (2) do;
      I_Next_stat = 'PPY' ;
      U_Next_stat = 'PPY' ;
   end;
   when (3) do;
      I_Next_stat = 'SDQ' ;
      U_Next_stat = 'SDQ' ;
   end;
   when (4) do;
      I_Next_stat = 'CUR' ;
      U_Next_stat = 'CUR' ;
   end;
   otherwise do;
      I_Next_stat = '';
      U_Next_stat = '';
   end;
end;
_SKIP_000:
if _LMR_BAD = 1 then do;
I_Next_stat = '';
U_Next_stat = '';
P_Next_statDEL = .;
P_Next_statPPY = .;
P_Next_statSDQ = .;
P_Next_statCUR = .;
end;
